Index: backend/src/main/java/com/example/jwt/domain/category/Category.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.jwt.domain.category;\r\n\r\nimport com.example.jwt.core.generic.ExtendedEntity;\r\nimport com.example.jwt.domain.product.Product;\r\nimport java.util.HashSet;\r\nimport java.util.Set;\r\nimport java.util.UUID;\r\nimport javax.persistence.Column;\r\nimport javax.persistence.Entity;\r\nimport javax.persistence.FetchType;\r\nimport javax.persistence.JoinColumn;\r\nimport javax.persistence.JoinTable;\r\nimport javax.persistence.ManyToMany;\r\nimport javax.persistence.Table;\r\n\r\n@Entity\r\n@Table(name = \"category\")\r\npublic class Category extends ExtendedEntity {\r\n\r\n  @Column(name = \"name\", nullable = false, unique = true)\r\n  private String name;\r\n\r\n//  @ManyToMany(fetch = FetchType.EAGER)\r\n//  @JoinTable(\r\n//      name = \"product_category\",\r\n//      joinColumns = @JoinColumn(name = \"_id\", referencedColumnName = \"id\"),\r\n//      inverseJoinColumns = @JoinColumn(name = \"category_id\", referencedColumnName = \"id\")\r\n//  )\r\n//  private Set<Product> authorities = new HashSet<>();\r\n\r\n  public Category() {\r\n  }\r\n\r\n  public Category(UUID id, String name, Set<Product> authorities) {\r\n    super(id);\r\n    this.name = name;\r\n//    this.authorities = authorities;\r\n  }\r\n\r\n  public String getName() {\r\n    return name;\r\n  }\r\n\r\n  public Category setName(String name) {\r\n    this.name = name;\r\n    return this;\r\n  }\r\n\r\n  public Set<Product> getProduct() {\r\n    return authorities;\r\n  }\r\n\r\n//  public Category setProduct(Set<Product> authorities) {\r\n//    this.authorities = authorities;\r\n//    return this;\r\n//  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/com/example/jwt/domain/category/Category.java b/backend/src/main/java/com/example/jwt/domain/category/Category.java
--- a/backend/src/main/java/com/example/jwt/domain/category/Category.java	(revision 115b53981e4e3a9abe3651fca11ecf80bbd22c39)
+++ b/backend/src/main/java/com/example/jwt/domain/category/Category.java	(date 1702501240832)
@@ -46,9 +46,9 @@
     return this;
   }
 
-  public Set<Product> getProduct() {
-    return authorities;
-  }
+//  public Set<Product> getProduct() {
+//    return authorities;
+//  }
 
 //  public Category setProduct(Set<Product> authorities) {
 //    this.authorities = authorities;
Index: backend/build/generated/sources/annotationProcessor/java/main/com/example/jwt/domain/user/dto/UserMapperImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/build/generated/sources/annotationProcessor/java/main/com/example/jwt/domain/user/dto/UserMapperImpl.java b/backend/build/generated/sources/annotationProcessor/java/main/com/example/jwt/domain/user/dto/UserMapperImpl.java
new file mode 100644
--- /dev/null	(date 1702501242480)
+++ b/backend/build/generated/sources/annotationProcessor/java/main/com/example/jwt/domain/user/dto/UserMapperImpl.java	(date 1702501242480)
@@ -0,0 +1,251 @@
+package com.example.jwt.domain.user.dto;
+
+import com.example.jwt.domain.authority.Authority;
+import com.example.jwt.domain.authority.dto.AuthorityDTO;
+import com.example.jwt.domain.role.Role;
+import com.example.jwt.domain.role.dto.RoleDTO;
+import com.example.jwt.domain.user.User;
+import java.util.ArrayList;
+import java.util.LinkedHashSet;
+import java.util.List;
+import java.util.Set;
+import javax.annotation.processing.Generated;
+import org.springframework.stereotype.Component;
+
+@Generated(
+    value = "org.mapstruct.ap.MappingProcessor",
+    date = "2023-12-13T22:00:42+0100",
+    comments = "version: 1.5.5.Final, compiler: IncrementalProcessingEnvironment from gradle-language-java-7.5.jar, environment: Java 17.0.7 (Oracle Corporation)"
+)
+@Component
+public class UserMapperImpl implements UserMapper {
+
+    @Override
+    public User fromDTO(UserDTO dto) {
+        if ( dto == null ) {
+            return null;
+        }
+
+        User user = new User();
+
+        user.setId( dto.getId() );
+        user.setFirstName( dto.getFirstName() );
+        user.setLastName( dto.getLastName() );
+        user.setEmail( dto.getEmail() );
+        user.setPassword( dto.getPassword() );
+        user.setAddress( dto.getAddress() );
+        user.setOrt( dto.getOrt() );
+        user.setPlz( dto.getPlz() );
+        user.setBirthday( dto.getBirthday() );
+        user.setLevel( dto.getLevel() );
+        user.setRoles( roleDTOSetToRoleSet( dto.getRoles() ) );
+
+        return user;
+    }
+
+    @Override
+    public List<User> fromDTOs(List<UserDTO> dtos) {
+        if ( dtos == null ) {
+            return null;
+        }
+
+        List<User> list = new ArrayList<User>( dtos.size() );
+        for ( UserDTO userDTO : dtos ) {
+            list.add( fromDTO( userDTO ) );
+        }
+
+        return list;
+    }
+
+    @Override
+    public Set<User> fromDTOs(Set<UserDTO> dtos) {
+        if ( dtos == null ) {
+            return null;
+        }
+
+        Set<User> set = new LinkedHashSet<User>( Math.max( (int) ( dtos.size() / .75f ) + 1, 16 ) );
+        for ( UserDTO userDTO : dtos ) {
+            set.add( fromDTO( userDTO ) );
+        }
+
+        return set;
+    }
+
+    @Override
+    public UserDTO toDTO(User BO) {
+        if ( BO == null ) {
+            return null;
+        }
+
+        UserDTO userDTO = new UserDTO();
+
+        userDTO.setId( BO.getId() );
+        userDTO.setFirstName( BO.getFirstName() );
+        userDTO.setLastName( BO.getLastName() );
+        userDTO.setEmail( BO.getEmail() );
+        userDTO.setPassword( BO.getPassword() );
+        userDTO.setAddress( BO.getAddress() );
+        userDTO.setOrt( BO.getOrt() );
+        userDTO.setPlz( BO.getPlz() );
+        userDTO.setBirthday( BO.getBirthday() );
+        userDTO.setLevel( BO.getLevel() );
+        userDTO.setRoles( roleSetToRoleDTOSet( BO.getRoles() ) );
+
+        return userDTO;
+    }
+
+    @Override
+    public List<UserDTO> toDTOs(List<User> BOs) {
+        if ( BOs == null ) {
+            return null;
+        }
+
+        List<UserDTO> list = new ArrayList<UserDTO>( BOs.size() );
+        for ( User user : BOs ) {
+            list.add( toDTO( user ) );
+        }
+
+        return list;
+    }
+
+    @Override
+    public Set<UserDTO> toDTOs(Set<User> BOs) {
+        if ( BOs == null ) {
+            return null;
+        }
+
+        Set<UserDTO> set = new LinkedHashSet<UserDTO>( Math.max( (int) ( BOs.size() / .75f ) + 1, 16 ) );
+        for ( User user : BOs ) {
+            set.add( toDTO( user ) );
+        }
+
+        return set;
+    }
+
+    @Override
+    public User fromUserRegisterDTO(UserRegisterDTO dto) {
+        if ( dto == null ) {
+            return null;
+        }
+
+        User user = new User();
+
+        user.setId( dto.getId() );
+        user.setFirstName( dto.getFirstName() );
+        user.setLastName( dto.getLastName() );
+        user.setEmail( dto.getEmail() );
+        user.setPassword( dto.getPassword() );
+        user.setAddress( dto.getAddress() );
+        user.setOrt( dto.getOrt() );
+        user.setPlz( dto.getPlz() );
+        user.setBirthday( dto.getBirthday() );
+
+        return user;
+    }
+
+    protected Authority authorityDTOToAuthority(AuthorityDTO authorityDTO) {
+        if ( authorityDTO == null ) {
+            return null;
+        }
+
+        Authority authority = new Authority();
+
+        authority.setId( authorityDTO.getId() );
+        authority.setName( authorityDTO.getName() );
+
+        return authority;
+    }
+
+    protected Set<Authority> authorityDTOSetToAuthoritySet(Set<AuthorityDTO> set) {
+        if ( set == null ) {
+            return null;
+        }
+
+        Set<Authority> set1 = new LinkedHashSet<Authority>( Math.max( (int) ( set.size() / .75f ) + 1, 16 ) );
+        for ( AuthorityDTO authorityDTO : set ) {
+            set1.add( authorityDTOToAuthority( authorityDTO ) );
+        }
+
+        return set1;
+    }
+
+    protected Role roleDTOToRole(RoleDTO roleDTO) {
+        if ( roleDTO == null ) {
+            return null;
+        }
+
+        Role role = new Role();
+
+        role.setId( roleDTO.getId() );
+        role.setName( roleDTO.getName() );
+        role.setAuthorities( authorityDTOSetToAuthoritySet( roleDTO.getAuthorities() ) );
+
+        return role;
+    }
+
+    protected Set<Role> roleDTOSetToRoleSet(Set<RoleDTO> set) {
+        if ( set == null ) {
+            return null;
+        }
+
+        Set<Role> set1 = new LinkedHashSet<Role>( Math.max( (int) ( set.size() / .75f ) + 1, 16 ) );
+        for ( RoleDTO roleDTO : set ) {
+            set1.add( roleDTOToRole( roleDTO ) );
+        }
+
+        return set1;
+    }
+
+    protected AuthorityDTO authorityToAuthorityDTO(Authority authority) {
+        if ( authority == null ) {
+            return null;
+        }
+
+        AuthorityDTO authorityDTO = new AuthorityDTO();
+
+        authorityDTO.setId( authority.getId() );
+        authorityDTO.setName( authority.getName() );
+
+        return authorityDTO;
+    }
+
+    protected Set<AuthorityDTO> authoritySetToAuthorityDTOSet(Set<Authority> set) {
+        if ( set == null ) {
+            return null;
+        }
+
+        Set<AuthorityDTO> set1 = new LinkedHashSet<AuthorityDTO>( Math.max( (int) ( set.size() / .75f ) + 1, 16 ) );
+        for ( Authority authority : set ) {
+            set1.add( authorityToAuthorityDTO( authority ) );
+        }
+
+        return set1;
+    }
+
+    protected RoleDTO roleToRoleDTO(Role role) {
+        if ( role == null ) {
+            return null;
+        }
+
+        RoleDTO roleDTO = new RoleDTO();
+
+        roleDTO.setId( role.getId() );
+        roleDTO.setName( role.getName() );
+        roleDTO.setAuthorities( authoritySetToAuthorityDTOSet( role.getAuthorities() ) );
+
+        return roleDTO;
+    }
+
+    protected Set<RoleDTO> roleSetToRoleDTOSet(Set<Role> set) {
+        if ( set == null ) {
+            return null;
+        }
+
+        Set<RoleDTO> set1 = new LinkedHashSet<RoleDTO>( Math.max( (int) ( set.size() / .75f ) + 1, 16 ) );
+        for ( Role role : set ) {
+            set1.add( roleToRoleDTO( role ) );
+        }
+
+        return set1;
+    }
+}
Index: backend/build/generated/sources/annotationProcessor/java/main/com/example/jwt/domain/category/dto/CategoryMapperImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/build/generated/sources/annotationProcessor/java/main/com/example/jwt/domain/category/dto/CategoryMapperImpl.java b/backend/build/generated/sources/annotationProcessor/java/main/com/example/jwt/domain/category/dto/CategoryMapperImpl.java
new file mode 100644
--- /dev/null	(date 1702501242504)
+++ b/backend/build/generated/sources/annotationProcessor/java/main/com/example/jwt/domain/category/dto/CategoryMapperImpl.java	(date 1702501242504)
@@ -0,0 +1,102 @@
+package com.example.jwt.domain.category.dto;
+
+import com.example.jwt.domain.category.Category;
+import java.util.ArrayList;
+import java.util.LinkedHashSet;
+import java.util.List;
+import java.util.Set;
+import javax.annotation.processing.Generated;
+import org.springframework.stereotype.Component;
+
+@Generated(
+    value = "org.mapstruct.ap.MappingProcessor",
+    date = "2023-12-13T22:00:42+0100",
+    comments = "version: 1.5.5.Final, compiler: IncrementalProcessingEnvironment from gradle-language-java-7.5.jar, environment: Java 17.0.7 (Oracle Corporation)"
+)
+@Component
+public class CategoryMapperImpl implements CategoryMapper {
+
+    @Override
+    public Category fromDTO(CategoryDTO dto) {
+        if ( dto == null ) {
+            return null;
+        }
+
+        Category category = new Category();
+
+        category.setId( dto.getId() );
+        category.setName( dto.getName() );
+
+        return category;
+    }
+
+    @Override
+    public List<Category> fromDTOs(List<CategoryDTO> dtos) {
+        if ( dtos == null ) {
+            return null;
+        }
+
+        List<Category> list = new ArrayList<Category>( dtos.size() );
+        for ( CategoryDTO categoryDTO : dtos ) {
+            list.add( fromDTO( categoryDTO ) );
+        }
+
+        return list;
+    }
+
+    @Override
+    public Set<Category> fromDTOs(Set<CategoryDTO> dtos) {
+        if ( dtos == null ) {
+            return null;
+        }
+
+        Set<Category> set = new LinkedHashSet<Category>( Math.max( (int) ( dtos.size() / .75f ) + 1, 16 ) );
+        for ( CategoryDTO categoryDTO : dtos ) {
+            set.add( fromDTO( categoryDTO ) );
+        }
+
+        return set;
+    }
+
+    @Override
+    public CategoryDTO toDTO(Category BO) {
+        if ( BO == null ) {
+            return null;
+        }
+
+        CategoryDTO categoryDTO = new CategoryDTO();
+
+        categoryDTO.setId( BO.getId() );
+        categoryDTO.setName( BO.getName() );
+
+        return categoryDTO;
+    }
+
+    @Override
+    public List<CategoryDTO> toDTOs(List<Category> BOs) {
+        if ( BOs == null ) {
+            return null;
+        }
+
+        List<CategoryDTO> list = new ArrayList<CategoryDTO>( BOs.size() );
+        for ( Category category : BOs ) {
+            list.add( toDTO( category ) );
+        }
+
+        return list;
+    }
+
+    @Override
+    public Set<CategoryDTO> toDTOs(Set<Category> BOs) {
+        if ( BOs == null ) {
+            return null;
+        }
+
+        Set<CategoryDTO> set = new LinkedHashSet<CategoryDTO>( Math.max( (int) ( BOs.size() / .75f ) + 1, 16 ) );
+        for ( Category category : BOs ) {
+            set.add( toDTO( category ) );
+        }
+
+        return set;
+    }
+}
Index: backend/build/generated/sources/annotationProcessor/java/main/com/example/jwt/domain/authority/dto/AuthorityMapperImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/build/generated/sources/annotationProcessor/java/main/com/example/jwt/domain/authority/dto/AuthorityMapperImpl.java b/backend/build/generated/sources/annotationProcessor/java/main/com/example/jwt/domain/authority/dto/AuthorityMapperImpl.java
new file mode 100644
--- /dev/null	(date 1702501242527)
+++ b/backend/build/generated/sources/annotationProcessor/java/main/com/example/jwt/domain/authority/dto/AuthorityMapperImpl.java	(date 1702501242527)
@@ -0,0 +1,102 @@
+package com.example.jwt.domain.authority.dto;
+
+import com.example.jwt.domain.authority.Authority;
+import java.util.ArrayList;
+import java.util.LinkedHashSet;
+import java.util.List;
+import java.util.Set;
+import javax.annotation.processing.Generated;
+import org.springframework.stereotype.Component;
+
+@Generated(
+    value = "org.mapstruct.ap.MappingProcessor",
+    date = "2023-12-13T22:00:42+0100",
+    comments = "version: 1.5.5.Final, compiler: IncrementalProcessingEnvironment from gradle-language-java-7.5.jar, environment: Java 17.0.7 (Oracle Corporation)"
+)
+@Component
+public class AuthorityMapperImpl implements AuthorityMapper {
+
+    @Override
+    public Authority fromDTO(AuthorityDTO dto) {
+        if ( dto == null ) {
+            return null;
+        }
+
+        Authority authority = new Authority();
+
+        authority.setId( dto.getId() );
+        authority.setName( dto.getName() );
+
+        return authority;
+    }
+
+    @Override
+    public List<Authority> fromDTOs(List<AuthorityDTO> dtos) {
+        if ( dtos == null ) {
+            return null;
+        }
+
+        List<Authority> list = new ArrayList<Authority>( dtos.size() );
+        for ( AuthorityDTO authorityDTO : dtos ) {
+            list.add( fromDTO( authorityDTO ) );
+        }
+
+        return list;
+    }
+
+    @Override
+    public Set<Authority> fromDTOs(Set<AuthorityDTO> dtos) {
+        if ( dtos == null ) {
+            return null;
+        }
+
+        Set<Authority> set = new LinkedHashSet<Authority>( Math.max( (int) ( dtos.size() / .75f ) + 1, 16 ) );
+        for ( AuthorityDTO authorityDTO : dtos ) {
+            set.add( fromDTO( authorityDTO ) );
+        }
+
+        return set;
+    }
+
+    @Override
+    public AuthorityDTO toDTO(Authority BO) {
+        if ( BO == null ) {
+            return null;
+        }
+
+        AuthorityDTO authorityDTO = new AuthorityDTO();
+
+        authorityDTO.setId( BO.getId() );
+        authorityDTO.setName( BO.getName() );
+
+        return authorityDTO;
+    }
+
+    @Override
+    public List<AuthorityDTO> toDTOs(List<Authority> BOs) {
+        if ( BOs == null ) {
+            return null;
+        }
+
+        List<AuthorityDTO> list = new ArrayList<AuthorityDTO>( BOs.size() );
+        for ( Authority authority : BOs ) {
+            list.add( toDTO( authority ) );
+        }
+
+        return list;
+    }
+
+    @Override
+    public Set<AuthorityDTO> toDTOs(Set<Authority> BOs) {
+        if ( BOs == null ) {
+            return null;
+        }
+
+        Set<AuthorityDTO> set = new LinkedHashSet<AuthorityDTO>( Math.max( (int) ( BOs.size() / .75f ) + 1, 16 ) );
+        for ( Authority authority : BOs ) {
+            set.add( toDTO( authority ) );
+        }
+
+        return set;
+    }
+}
Index: backend/build/generated/sources/annotationProcessor/java/main/com/example/jwt/domain/role/dto/RoleMapperImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/build/generated/sources/annotationProcessor/java/main/com/example/jwt/domain/role/dto/RoleMapperImpl.java b/backend/build/generated/sources/annotationProcessor/java/main/com/example/jwt/domain/role/dto/RoleMapperImpl.java
new file mode 100644
--- /dev/null	(date 1702501242397)
+++ b/backend/build/generated/sources/annotationProcessor/java/main/com/example/jwt/domain/role/dto/RoleMapperImpl.java	(date 1702501242397)
@@ -0,0 +1,158 @@
+package com.example.jwt.domain.role.dto;
+
+import com.example.jwt.domain.authority.Authority;
+import com.example.jwt.domain.authority.dto.AuthorityDTO;
+import com.example.jwt.domain.role.Role;
+import java.util.ArrayList;
+import java.util.LinkedHashSet;
+import java.util.List;
+import java.util.Set;
+import javax.annotation.processing.Generated;
+import org.springframework.stereotype.Component;
+
+@Generated(
+    value = "org.mapstruct.ap.MappingProcessor",
+    date = "2023-12-13T22:00:42+0100",
+    comments = "version: 1.5.5.Final, compiler: IncrementalProcessingEnvironment from gradle-language-java-7.5.jar, environment: Java 17.0.7 (Oracle Corporation)"
+)
+@Component
+public class RoleMapperImpl implements RoleMapper {
+
+    @Override
+    public Role fromDTO(RoleDTO dto) {
+        if ( dto == null ) {
+            return null;
+        }
+
+        Role role = new Role();
+
+        role.setId( dto.getId() );
+        role.setName( dto.getName() );
+        role.setAuthorities( authorityDTOSetToAuthoritySet( dto.getAuthorities() ) );
+
+        return role;
+    }
+
+    @Override
+    public List<Role> fromDTOs(List<RoleDTO> dtos) {
+        if ( dtos == null ) {
+            return null;
+        }
+
+        List<Role> list = new ArrayList<Role>( dtos.size() );
+        for ( RoleDTO roleDTO : dtos ) {
+            list.add( fromDTO( roleDTO ) );
+        }
+
+        return list;
+    }
+
+    @Override
+    public Set<Role> fromDTOs(Set<RoleDTO> dtos) {
+        if ( dtos == null ) {
+            return null;
+        }
+
+        Set<Role> set = new LinkedHashSet<Role>( Math.max( (int) ( dtos.size() / .75f ) + 1, 16 ) );
+        for ( RoleDTO roleDTO : dtos ) {
+            set.add( fromDTO( roleDTO ) );
+        }
+
+        return set;
+    }
+
+    @Override
+    public RoleDTO toDTO(Role BO) {
+        if ( BO == null ) {
+            return null;
+        }
+
+        RoleDTO roleDTO = new RoleDTO();
+
+        roleDTO.setId( BO.getId() );
+        roleDTO.setName( BO.getName() );
+        roleDTO.setAuthorities( authoritySetToAuthorityDTOSet( BO.getAuthorities() ) );
+
+        return roleDTO;
+    }
+
+    @Override
+    public List<RoleDTO> toDTOs(List<Role> BOs) {
+        if ( BOs == null ) {
+            return null;
+        }
+
+        List<RoleDTO> list = new ArrayList<RoleDTO>( BOs.size() );
+        for ( Role role : BOs ) {
+            list.add( toDTO( role ) );
+        }
+
+        return list;
+    }
+
+    @Override
+    public Set<RoleDTO> toDTOs(Set<Role> BOs) {
+        if ( BOs == null ) {
+            return null;
+        }
+
+        Set<RoleDTO> set = new LinkedHashSet<RoleDTO>( Math.max( (int) ( BOs.size() / .75f ) + 1, 16 ) );
+        for ( Role role : BOs ) {
+            set.add( toDTO( role ) );
+        }
+
+        return set;
+    }
+
+    protected Authority authorityDTOToAuthority(AuthorityDTO authorityDTO) {
+        if ( authorityDTO == null ) {
+            return null;
+        }
+
+        Authority authority = new Authority();
+
+        authority.setId( authorityDTO.getId() );
+        authority.setName( authorityDTO.getName() );
+
+        return authority;
+    }
+
+    protected Set<Authority> authorityDTOSetToAuthoritySet(Set<AuthorityDTO> set) {
+        if ( set == null ) {
+            return null;
+        }
+
+        Set<Authority> set1 = new LinkedHashSet<Authority>( Math.max( (int) ( set.size() / .75f ) + 1, 16 ) );
+        for ( AuthorityDTO authorityDTO : set ) {
+            set1.add( authorityDTOToAuthority( authorityDTO ) );
+        }
+
+        return set1;
+    }
+
+    protected AuthorityDTO authorityToAuthorityDTO(Authority authority) {
+        if ( authority == null ) {
+            return null;
+        }
+
+        AuthorityDTO authorityDTO = new AuthorityDTO();
+
+        authorityDTO.setId( authority.getId() );
+        authorityDTO.setName( authority.getName() );
+
+        return authorityDTO;
+    }
+
+    protected Set<AuthorityDTO> authoritySetToAuthorityDTOSet(Set<Authority> set) {
+        if ( set == null ) {
+            return null;
+        }
+
+        Set<AuthorityDTO> set1 = new LinkedHashSet<AuthorityDTO>( Math.max( (int) ( set.size() / .75f ) + 1, 16 ) );
+        for ( Authority authority : set ) {
+            set1.add( authorityToAuthorityDTO( authority ) );
+        }
+
+        return set1;
+    }
+}
Index: backend/build/generated/sources/annotationProcessor/java/main/com/example/jwt/domain/product/dto/ProductMapperImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/build/generated/sources/annotationProcessor/java/main/com/example/jwt/domain/product/dto/ProductMapperImpl.java b/backend/build/generated/sources/annotationProcessor/java/main/com/example/jwt/domain/product/dto/ProductMapperImpl.java
new file mode 100644
--- /dev/null	(date 1702501242410)
+++ b/backend/build/generated/sources/annotationProcessor/java/main/com/example/jwt/domain/product/dto/ProductMapperImpl.java	(date 1702501242410)
@@ -0,0 +1,28 @@
+package com.example.jwt.domain.product.dto;
+
+import com.example.jwt.domain.product.Product;
+import javax.annotation.processing.Generated;
+import org.springframework.stereotype.Component;
+
+@Generated(
+    value = "org.mapstruct.ap.MappingProcessor",
+    date = "2023-12-13T22:00:42+0100",
+    comments = "version: 1.5.5.Final, compiler: IncrementalProcessingEnvironment from gradle-language-java-7.5.jar, environment: Java 17.0.7 (Oracle Corporation)"
+)
+@Component
+public class ProductMapperImpl implements ProductMapper {
+
+    @Override
+    public Product productDTOToProduct(ProductDTO productDTO) {
+        if ( productDTO == null ) {
+            return null;
+        }
+
+        Product product = new Product();
+
+        product.setName( productDTO.getName() );
+        product.setPrice( productDTO.getPrice() );
+
+        return product;
+    }
+}
