Index: backend/src/main/java/com/example/jwt/domain/user/UserServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.jwt.domain.user;\r\n\r\nimport com.example.jwt.core.generic.ExtendedServiceImpl;\r\nimport org.slf4j.Logger;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.security.core.userdetails.UserDetails;\r\nimport org.springframework.security.core.userdetails.UsernameNotFoundException;\r\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\r\nimport org.springframework.stereotype.Service;\r\n\r\n@Service\r\npublic class UserServiceImpl extends ExtendedServiceImpl<User> implements UserService {\r\n\r\n  private final BCryptPasswordEncoder bCryptPasswordEncoder;\r\n  @Override\r\n  public User register(User user) {\r\n    user.setPassword(bCryptPasswordEncoder.encode(user.getPassword()));\r\n\r\n    user.setRole(Role.CLIENT);\r\n\r\n    Set<Authority> authorities = new HashSet<>();\r\n    authorities.add(Authority.CAN_PLACE_ORDER);\r\n    authorities.add(Authority.CAN_RETRIEVE_PURCHASE_HISTORY);\r\n    authorities.add(Authority.CAN_RETRIEVE_PRODUCTS);\r\n    user.setAuthorities(authorities);\r\n\r\n    return save(user);\r\n  @Autowired\r\n  public UserServiceImpl(UserRepository repository, Logger logger,\r\n      BCryptPasswordEncoder bCryptPasswordEncoder) {\r\n    super(repository, logger);\r\n    this.bCryptPasswordEncoder = bCryptPasswordEncoder;\r\n  }\r\n\r\n  @Override\r\n  public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {\r\n    return ((UserRepository) repository).findByEmail(email).map(UserDetailsImpl::new)\r\n        .orElseThrow(() -> new UsernameNotFoundException(email));\r\n  }\r\n\r\n  @Override\r\n  public User register(User user) {\r\n    user.setPassword(bCryptPasswordEncoder.encode(user.getPassword()));\r\n    return save(user);\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/main/java/com/example/jwt/domain/user/UserServiceImpl.java b/backend/src/main/java/com/example/jwt/domain/user/UserServiceImpl.java
--- a/backend/src/main/java/com/example/jwt/domain/user/UserServiceImpl.java	(revision b9a561d670640a2af8783872f8c96cfe53ccc13f)
+++ b/backend/src/main/java/com/example/jwt/domain/user/UserServiceImpl.java	(date 1702492436992)
@@ -1,6 +1,8 @@
 package com.example.jwt.domain.user;
 
 import com.example.jwt.core.generic.ExtendedServiceImpl;
+import com.example.jwt.domain.authority.Authority;
+import com.example.jwt.domain.role.Role;
 import org.slf4j.Logger;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.security.core.userdetails.UserDetails;
@@ -8,6 +10,9 @@
 import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
 import org.springframework.stereotype.Service;
 
+import java.util.HashSet;
+import java.util.Set;
+
 @Service
 public class UserServiceImpl extends ExtendedServiceImpl<User> implements UserService {
 
@@ -16,15 +21,18 @@
   public User register(User user) {
     user.setPassword(bCryptPasswordEncoder.encode(user.getPassword()));
 
-    user.setRole(Role.CLIENT);
-
-    Set<Authority> authorities = new HashSet<>();
-    authorities.add(Authority.CAN_PLACE_ORDER);
-    authorities.add(Authority.CAN_RETRIEVE_PURCHASE_HISTORY);
-    authorities.add(Authority.CAN_RETRIEVE_PRODUCTS);
-    user.setAuthorities(authorities);
+//    user.setRoles(Role.CLIENT);
+//
+//    Set<Authority> authorities = new HashSet<>();
+//    authorities.add(Authority.CAN_PLACE_ORDER);
+//    authorities.add(Authority.CAN_RETRIEVE_PURCHASE_HISTORY);
+//    authorities.add(Authority.CAN_RETRIEVE_PRODUCTS);
+//    user.setAuthorities(authorities);
 
     return save(user);
+
+  }
+
   @Autowired
   public UserServiceImpl(UserRepository repository, Logger logger,
       BCryptPasswordEncoder bCryptPasswordEncoder) {
@@ -38,9 +46,4 @@
         .orElseThrow(() -> new UsernameNotFoundException(email));
   }
 
-  @Override
-  public User register(User user) {
-    user.setPassword(bCryptPasswordEncoder.encode(user.getPassword()));
-    return save(user);
-  }
 }
Index: backend/build/generated/sources/annotationProcessor/java/main/com/example/jwt/domain/authority/dto/AuthorityMapperImpl.java
===================================================================
diff --git a/backend/build/generated/sources/annotationProcessor/java/main/com/example/jwt/domain/authority/dto/AuthorityMapperImpl.java b/backend/build/generated/sources/annotationProcessor/java/main/com/example/jwt/domain/authority/dto/AuthorityMapperImpl.java
deleted file mode 100644
--- a/backend/build/generated/sources/annotationProcessor/java/main/com/example/jwt/domain/authority/dto/AuthorityMapperImpl.java	(revision b9a561d670640a2af8783872f8c96cfe53ccc13f)
+++ /dev/null	(revision b9a561d670640a2af8783872f8c96cfe53ccc13f)
@@ -1,102 +0,0 @@
-package com.example.jwt.domain.authority.dto;
-
-import com.example.jwt.domain.authority.Authority;
-import java.util.ArrayList;
-import java.util.LinkedHashSet;
-import java.util.List;
-import java.util.Set;
-import javax.annotation.processing.Generated;
-import org.springframework.stereotype.Component;
-
-@Generated(
-    value = "org.mapstruct.ap.MappingProcessor",
-    date = "2023-12-09T11:53:34+0100",
-    comments = "version: 1.5.5.Final, compiler: IncrementalProcessingEnvironment from gradle-language-java-7.5.jar, environment: Java 17.0.9 (Eclipse Adoptium)"
-)
-@Component
-public class AuthorityMapperImpl implements AuthorityMapper {
-
-    @Override
-    public Authority fromDTO(AuthorityDTO dto) {
-        if ( dto == null ) {
-            return null;
-        }
-
-        Authority authority = new Authority();
-
-        authority.setId( dto.getId() );
-        authority.setName( dto.getName() );
-
-        return authority;
-    }
-
-    @Override
-    public List<Authority> fromDTOs(List<AuthorityDTO> dtos) {
-        if ( dtos == null ) {
-            return null;
-        }
-
-        List<Authority> list = new ArrayList<Authority>( dtos.size() );
-        for ( AuthorityDTO authorityDTO : dtos ) {
-            list.add( fromDTO( authorityDTO ) );
-        }
-
-        return list;
-    }
-
-    @Override
-    public Set<Authority> fromDTOs(Set<AuthorityDTO> dtos) {
-        if ( dtos == null ) {
-            return null;
-        }
-
-        Set<Authority> set = new LinkedHashSet<Authority>( Math.max( (int) ( dtos.size() / .75f ) + 1, 16 ) );
-        for ( AuthorityDTO authorityDTO : dtos ) {
-            set.add( fromDTO( authorityDTO ) );
-        }
-
-        return set;
-    }
-
-    @Override
-    public AuthorityDTO toDTO(Authority BO) {
-        if ( BO == null ) {
-            return null;
-        }
-
-        AuthorityDTO authorityDTO = new AuthorityDTO();
-
-        authorityDTO.setId( BO.getId() );
-        authorityDTO.setName( BO.getName() );
-
-        return authorityDTO;
-    }
-
-    @Override
-    public List<AuthorityDTO> toDTOs(List<Authority> BOs) {
-        if ( BOs == null ) {
-            return null;
-        }
-
-        List<AuthorityDTO> list = new ArrayList<AuthorityDTO>( BOs.size() );
-        for ( Authority authority : BOs ) {
-            list.add( toDTO( authority ) );
-        }
-
-        return list;
-    }
-
-    @Override
-    public Set<AuthorityDTO> toDTOs(Set<Authority> BOs) {
-        if ( BOs == null ) {
-            return null;
-        }
-
-        Set<AuthorityDTO> set = new LinkedHashSet<AuthorityDTO>( Math.max( (int) ( BOs.size() / .75f ) + 1, 16 ) );
-        for ( Authority authority : BOs ) {
-            set.add( toDTO( authority ) );
-        }
-
-        return set;
-    }
-}
Index: backend/build/classes/java/main/META-INF/spring-configuration-metadata.json
===================================================================
diff --git a/backend/build/classes/java/main/META-INF/spring-configuration-metadata.json b/backend/build/classes/java/main/META-INF/spring-configuration-metadata.json
deleted file mode 100644
--- a/backend/build/classes/java/main/META-INF/spring-configuration-metadata.json	(revision b9a561d670640a2af8783872f8c96cfe53ccc13f)
+++ /dev/null	(revision b9a561d670640a2af8783872f8c96cfe53ccc13f)
@@ -1,28 +0,0 @@
-{
-  "groups": [
-    {
-      "name": "jwt",
-      "type": "com.example.jwt.core.security.helpers.JwtProperties",
-      "sourceType": "com.example.jwt.core.security.helpers.JwtProperties"
-    }
-  ],
-  "properties": [
-    {
-      "name": "jwt.expiration-millis",
-      "type": "java.lang.Long",
-      "sourceType": "com.example.jwt.core.security.helpers.JwtProperties",
-      "defaultValue": 0
-    },
-    {
-      "name": "jwt.issuer",
-      "type": "java.lang.String",
-      "sourceType": "com.example.jwt.core.security.helpers.JwtProperties"
-    },
-    {
-      "name": "jwt.secret",
-      "type": "java.lang.String",
-      "sourceType": "com.example.jwt.core.security.helpers.JwtProperties"
-    }
-  ],
-  "hints": []
-}
\ No newline at end of file
Index: backend/build/generated/sources/annotationProcessor/java/main/com/example/jwt/domain/role/dto/RoleMapperImpl.java
===================================================================
diff --git a/backend/build/generated/sources/annotationProcessor/java/main/com/example/jwt/domain/role/dto/RoleMapperImpl.java b/backend/build/generated/sources/annotationProcessor/java/main/com/example/jwt/domain/role/dto/RoleMapperImpl.java
deleted file mode 100644
--- a/backend/build/generated/sources/annotationProcessor/java/main/com/example/jwt/domain/role/dto/RoleMapperImpl.java	(revision b9a561d670640a2af8783872f8c96cfe53ccc13f)
+++ /dev/null	(revision b9a561d670640a2af8783872f8c96cfe53ccc13f)
@@ -1,158 +0,0 @@
-package com.example.jwt.domain.role.dto;
-
-import com.example.jwt.domain.authority.Authority;
-import com.example.jwt.domain.authority.dto.AuthorityDTO;
-import com.example.jwt.domain.role.Role;
-import java.util.ArrayList;
-import java.util.LinkedHashSet;
-import java.util.List;
-import java.util.Set;
-import javax.annotation.processing.Generated;
-import org.springframework.stereotype.Component;
-
-@Generated(
-    value = "org.mapstruct.ap.MappingProcessor",
-    date = "2023-12-09T11:53:35+0100",
-    comments = "version: 1.5.5.Final, compiler: IncrementalProcessingEnvironment from gradle-language-java-7.5.jar, environment: Java 17.0.9 (Eclipse Adoptium)"
-)
-@Component
-public class RoleMapperImpl implements RoleMapper {
-
-    @Override
-    public Role fromDTO(RoleDTO dto) {
-        if ( dto == null ) {
-            return null;
-        }
-
-        Role role = new Role();
-
-        role.setId( dto.getId() );
-        role.setName( dto.getName() );
-        role.setAuthorities( authorityDTOSetToAuthoritySet( dto.getAuthorities() ) );
-
-        return role;
-    }
-
-    @Override
-    public List<Role> fromDTOs(List<RoleDTO> dtos) {
-        if ( dtos == null ) {
-            return null;
-        }
-
-        List<Role> list = new ArrayList<Role>( dtos.size() );
-        for ( RoleDTO roleDTO : dtos ) {
-            list.add( fromDTO( roleDTO ) );
-        }
-
-        return list;
-    }
-
-    @Override
-    public Set<Role> fromDTOs(Set<RoleDTO> dtos) {
-        if ( dtos == null ) {
-            return null;
-        }
-
-        Set<Role> set = new LinkedHashSet<Role>( Math.max( (int) ( dtos.size() / .75f ) + 1, 16 ) );
-        for ( RoleDTO roleDTO : dtos ) {
-            set.add( fromDTO( roleDTO ) );
-        }
-
-        return set;
-    }
-
-    @Override
-    public RoleDTO toDTO(Role BO) {
-        if ( BO == null ) {
-            return null;
-        }
-
-        RoleDTO roleDTO = new RoleDTO();
-
-        roleDTO.setId( BO.getId() );
-        roleDTO.setName( BO.getName() );
-        roleDTO.setAuthorities( authoritySetToAuthorityDTOSet( BO.getAuthorities() ) );
-
-        return roleDTO;
-    }
-
-    @Override
-    public List<RoleDTO> toDTOs(List<Role> BOs) {
-        if ( BOs == null ) {
-            return null;
-        }
-
-        List<RoleDTO> list = new ArrayList<RoleDTO>( BOs.size() );
-        for ( Role role : BOs ) {
-            list.add( toDTO( role ) );
-        }
-
-        return list;
-    }
-
-    @Override
-    public Set<RoleDTO> toDTOs(Set<Role> BOs) {
-        if ( BOs == null ) {
-            return null;
-        }
-
-        Set<RoleDTO> set = new LinkedHashSet<RoleDTO>( Math.max( (int) ( BOs.size() / .75f ) + 1, 16 ) );
-        for ( Role role : BOs ) {
-            set.add( toDTO( role ) );
-        }
-
-        return set;
-    }
-
-    protected Authority authorityDTOToAuthority(AuthorityDTO authorityDTO) {
-        if ( authorityDTO == null ) {
-            return null;
-        }
-
-        Authority authority = new Authority();
-
-        authority.setId( authorityDTO.getId() );
-        authority.setName( authorityDTO.getName() );
-
-        return authority;
-    }
-
-    protected Set<Authority> authorityDTOSetToAuthoritySet(Set<AuthorityDTO> set) {
-        if ( set == null ) {
-            return null;
-        }
-
-        Set<Authority> set1 = new LinkedHashSet<Authority>( Math.max( (int) ( set.size() / .75f ) + 1, 16 ) );
-        for ( AuthorityDTO authorityDTO : set ) {
-            set1.add( authorityDTOToAuthority( authorityDTO ) );
-        }
-
-        return set1;
-    }
-
-    protected AuthorityDTO authorityToAuthorityDTO(Authority authority) {
-        if ( authority == null ) {
-            return null;
-        }
-
-        AuthorityDTO authorityDTO = new AuthorityDTO();
-
-        authorityDTO.setId( authority.getId() );
-        authorityDTO.setName( authority.getName() );
-
-        return authorityDTO;
-    }
-
-    protected Set<AuthorityDTO> authoritySetToAuthorityDTOSet(Set<Authority> set) {
-        if ( set == null ) {
-            return null;
-        }
-
-        Set<AuthorityDTO> set1 = new LinkedHashSet<AuthorityDTO>( Math.max( (int) ( set.size() / .75f ) + 1, 16 ) );
-        for ( Authority authority : set ) {
-            set1.add( authorityToAuthorityDTO( authority ) );
-        }
-
-        return set1;
-    }
-}
Index: backend/build/generated/sources/annotationProcessor/java/main/com/example/jwt/domain/user/dto/UserMapperImpl.java
===================================================================
diff --git a/backend/build/generated/sources/annotationProcessor/java/main/com/example/jwt/domain/user/dto/UserMapperImpl.java b/backend/build/generated/sources/annotationProcessor/java/main/com/example/jwt/domain/user/dto/UserMapperImpl.java
deleted file mode 100644
--- a/backend/build/generated/sources/annotationProcessor/java/main/com/example/jwt/domain/user/dto/UserMapperImpl.java	(revision b9a561d670640a2af8783872f8c96cfe53ccc13f)
+++ /dev/null	(revision b9a561d670640a2af8783872f8c96cfe53ccc13f)
@@ -1,235 +0,0 @@
-package com.example.jwt.domain.user.dto;
-
-import com.example.jwt.domain.authority.Authority;
-import com.example.jwt.domain.authority.dto.AuthorityDTO;
-import com.example.jwt.domain.role.Role;
-import com.example.jwt.domain.role.dto.RoleDTO;
-import com.example.jwt.domain.user.User;
-import java.util.ArrayList;
-import java.util.LinkedHashSet;
-import java.util.List;
-import java.util.Set;
-import javax.annotation.processing.Generated;
-import org.springframework.stereotype.Component;
-
-@Generated(
-    value = "org.mapstruct.ap.MappingProcessor",
-    date = "2023-12-09T11:53:35+0100",
-    comments = "version: 1.5.5.Final, compiler: IncrementalProcessingEnvironment from gradle-language-java-7.5.jar, environment: Java 17.0.9 (Eclipse Adoptium)"
-)
-@Component
-public class UserMapperImpl implements UserMapper {
-
-    @Override
-    public User fromDTO(UserDTO dto) {
-        if ( dto == null ) {
-            return null;
-        }
-
-        User user = new User();
-
-        user.setId( dto.getId() );
-        user.setFirstName( dto.getFirstName() );
-        user.setLastName( dto.getLastName() );
-        user.setEmail( dto.getEmail() );
-        user.setRoles( roleDTOSetToRoleSet( dto.getRoles() ) );
-
-        return user;
-    }
-
-    @Override
-    public List<User> fromDTOs(List<UserDTO> dtos) {
-        if ( dtos == null ) {
-            return null;
-        }
-
-        List<User> list = new ArrayList<User>( dtos.size() );
-        for ( UserDTO userDTO : dtos ) {
-            list.add( fromDTO( userDTO ) );
-        }
-
-        return list;
-    }
-
-    @Override
-    public Set<User> fromDTOs(Set<UserDTO> dtos) {
-        if ( dtos == null ) {
-            return null;
-        }
-
-        Set<User> set = new LinkedHashSet<User>( Math.max( (int) ( dtos.size() / .75f ) + 1, 16 ) );
-        for ( UserDTO userDTO : dtos ) {
-            set.add( fromDTO( userDTO ) );
-        }
-
-        return set;
-    }
-
-    @Override
-    public UserDTO toDTO(User BO) {
-        if ( BO == null ) {
-            return null;
-        }
-
-        UserDTO userDTO = new UserDTO();
-
-        userDTO.setId( BO.getId() );
-        userDTO.setFirstName( BO.getFirstName() );
-        userDTO.setLastName( BO.getLastName() );
-        userDTO.setEmail( BO.getEmail() );
-        userDTO.setRoles( roleSetToRoleDTOSet( BO.getRoles() ) );
-
-        return userDTO;
-    }
-
-    @Override
-    public List<UserDTO> toDTOs(List<User> BOs) {
-        if ( BOs == null ) {
-            return null;
-        }
-
-        List<UserDTO> list = new ArrayList<UserDTO>( BOs.size() );
-        for ( User user : BOs ) {
-            list.add( toDTO( user ) );
-        }
-
-        return list;
-    }
-
-    @Override
-    public Set<UserDTO> toDTOs(Set<User> BOs) {
-        if ( BOs == null ) {
-            return null;
-        }
-
-        Set<UserDTO> set = new LinkedHashSet<UserDTO>( Math.max( (int) ( BOs.size() / .75f ) + 1, 16 ) );
-        for ( User user : BOs ) {
-            set.add( toDTO( user ) );
-        }
-
-        return set;
-    }
-
-    @Override
-    public User fromUserRegisterDTO(UserRegisterDTO dto) {
-        if ( dto == null ) {
-            return null;
-        }
-
-        User user = new User();
-
-        user.setId( dto.getId() );
-        user.setFirstName( dto.getFirstName() );
-        user.setLastName( dto.getLastName() );
-        user.setEmail( dto.getEmail() );
-        user.setPassword( dto.getPassword() );
-
-        return user;
-    }
-
-    protected Authority authorityDTOToAuthority(AuthorityDTO authorityDTO) {
-        if ( authorityDTO == null ) {
-            return null;
-        }
-
-        Authority authority = new Authority();
-
-        authority.setId( authorityDTO.getId() );
-        authority.setName( authorityDTO.getName() );
-
-        return authority;
-    }
-
-    protected Set<Authority> authorityDTOSetToAuthoritySet(Set<AuthorityDTO> set) {
-        if ( set == null ) {
-            return null;
-        }
-
-        Set<Authority> set1 = new LinkedHashSet<Authority>( Math.max( (int) ( set.size() / .75f ) + 1, 16 ) );
-        for ( AuthorityDTO authorityDTO : set ) {
-            set1.add( authorityDTOToAuthority( authorityDTO ) );
-        }
-
-        return set1;
-    }
-
-    protected Role roleDTOToRole(RoleDTO roleDTO) {
-        if ( roleDTO == null ) {
-            return null;
-        }
-
-        Role role = new Role();
-
-        role.setId( roleDTO.getId() );
-        role.setName( roleDTO.getName() );
-        role.setAuthorities( authorityDTOSetToAuthoritySet( roleDTO.getAuthorities() ) );
-
-        return role;
-    }
-
-    protected Set<Role> roleDTOSetToRoleSet(Set<RoleDTO> set) {
-        if ( set == null ) {
-            return null;
-        }
-
-        Set<Role> set1 = new LinkedHashSet<Role>( Math.max( (int) ( set.size() / .75f ) + 1, 16 ) );
-        for ( RoleDTO roleDTO : set ) {
-            set1.add( roleDTOToRole( roleDTO ) );
-        }
-
-        return set1;
-    }
-
-    protected AuthorityDTO authorityToAuthorityDTO(Authority authority) {
-        if ( authority == null ) {
-            return null;
-        }
-
-        AuthorityDTO authorityDTO = new AuthorityDTO();
-
-        authorityDTO.setId( authority.getId() );
-        authorityDTO.setName( authority.getName() );
-
-        return authorityDTO;
-    }
-
-    protected Set<AuthorityDTO> authoritySetToAuthorityDTOSet(Set<Authority> set) {
-        if ( set == null ) {
-            return null;
-        }
-
-        Set<AuthorityDTO> set1 = new LinkedHashSet<AuthorityDTO>( Math.max( (int) ( set.size() / .75f ) + 1, 16 ) );
-        for ( Authority authority : set ) {
-            set1.add( authorityToAuthorityDTO( authority ) );
-        }
-
-        return set1;
-    }
-
-    protected RoleDTO roleToRoleDTO(Role role) {
-        if ( role == null ) {
-            return null;
-        }
-
-        RoleDTO roleDTO = new RoleDTO();
-
-        roleDTO.setId( role.getId() );
-        roleDTO.setName( role.getName() );
-        roleDTO.setAuthorities( authoritySetToAuthorityDTOSet( role.getAuthorities() ) );
-
-        return roleDTO;
-    }
-
-    protected Set<RoleDTO> roleSetToRoleDTOSet(Set<Role> set) {
-        if ( set == null ) {
-            return null;
-        }
-
-        Set<RoleDTO> set1 = new LinkedHashSet<RoleDTO>( Math.max( (int) ( set.size() / .75f ) + 1, 16 ) );
-        for ( Role role : set ) {
-            set1.add( roleToRoleDTO( role ) );
-        }
-
-        return set1;
-    }
-}
